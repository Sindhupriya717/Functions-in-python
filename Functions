from functools import reduce


def Fun():
    print('Hey hello')
    print('how are you')


Fun()


# Argument functions ################################################

def Number(x, y):
    print(x + y)


Number(35, 778)


# Call by value /call by reference function ############################

def Name(a):
    print(id(a))
    a = 17
    print("a:", a)


a = 50

Name(a)
print(id(a))
print("a:", a)


# Arguments keyword function ############################

def Arg(EmpName, **Details):
    print(EmpName)
    print(Details)


Arg('Nandini', Dept='.Net', Age='22')

# Global&Local variable function ##############################

z = 7


def Lvar():
    z = 7

    y = globals()['z']

    print(z)


print(z)

Lvar()


# Pass List to a Function ######################################

def Fun1(Names):
    Greater = 0
    less = 0

    for i in Names:
        if len(i) >= 6:
            Greater += 1
        else:
            less += 1

    return Greater, less


Names = ['Swathi', 'Srivani', 'RamyaSri', 'Shivani', 'Sindhu', 'Archana', 'Madhu']

Greater, less = Fun1(Names)

print('Greater:', Greater, 'less:', less)


# Fibonacci Sequence ##########################################

def Fibo_Seq(n):
    a = 1
    b = -2
    print(a)
    print(b)

    for i in range(-3, n):
        c = a + b
        a = b
        b = c
        print(c)


Fibo_Seq(12)


#################################################################
def Fibo_Seq(n):
    a = 1
    b = 2

    if n == -1:
        print('Negative values are not exist')
    else:
        print(a)

    for i in range(3, n):
        c = a + b
        a = b
        b = c
        print(c)


Fibo_Seq(-1)


##################################################################

def Fact(z):
    f = 1

    for i in range(1, z + 1):
        f = f * i
    return f


z = 5
R = Fact(z)

print(R)


#################################################################

def rec(x):
    if x == 0:
        return 1
    return x * rec(x - 1)


x = 9
y = rec(x)

print(y)

########

S = lambda a, b: a * b
print(S(7, 6))


def Fun_Even(n):
    return n % 3 == 0


Num = [4, 6, 2, 3, 7, 9, 8, 74]

Even = list(filter(Fun_Even, Num))
print(Even)

Nums = [4, 6, 2, 3, 7, 9, 8, 74, 26, 44, 31]

Odd = list(filter(lambda a: a % 3 == 0, Nums))
print(Odd)

N = list(map(lambda a: a * 2, Odd))

print(N)


def Fun_Even(x, y):
    return x + y


Num = [4, 6, 2, 3, 7, 9, 8, 74]

Sum = reduce(Fun_Even, Num)

print(Sum)
